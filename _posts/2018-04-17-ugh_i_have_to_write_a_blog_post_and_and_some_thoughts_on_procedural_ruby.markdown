---
layout: post
title:      "Ugh, I Have To Write A Blog Post && Some Thoughts On Procedural Ruby"
date:       2018-04-17 16:23:17 +0000
permalink:  ugh_i_have_to_write_a_blog_post_and_and_some_thoughts_on_procedural_ruby
---

I've been a Flatiron student for a little over a month now. So far, I have enjoyed the curriculum and seem to gain a better understanding of Full Stack Web Development as each day goes by. I will try to articulate a few memorable moments of procedural Ruby below. However, the biggest challenge so far has been blog posts. Every time I login to learn.co I see that notification that a blog post is due, and I am filled with dread.  I understand logically the many benefits from writing a blog post and developing this skill, but I have a really hard time completing the actual assignment. I even really enjoy other blog posts and find them incredibly useful.  In fact, when OO ruby finally started to make sense to me, it was from this fun post ([click here](https://medium.com/@tpstar/object-relationships-in-ruby-explained-by-relationships-in-pokemons-8dd64c8af773)) comparing the object relationships to Pokémon relationships. So, how did finally get to the point of starting this blog post? By reading other blog posts of course! If you are struggling with the blog like me, start by reading other blogs and hopefully eventually you’ll be able to get the motivation you need to post an awesome blog of your own!

One of the biggest challenges for me with procedural ruby was the return value of a method.  I still find myself perplexed by an error and realize by opening up irb to see what the return value is.  The Parrot lab is something my mind tends to reference a lot, especially if I ever find myself writing "puts". Puts to me always make me yield as I know if it’s the last line of a method I will get nil- or false for that matter often causing a domino effect in throughout the rest of the code.  Although I enjoy pry and see it's benefits when it comes to seeing the return value of a method, I prefer to always run my method in IRB first.

My goal as I write this, and future blog posts is mention a class method that I discovered outside of the regular curriculum. With this post I want to mention #squeeze.  Squeeze was discovered while solving a lab where I had to remove duplicate punctuation (I’m sorry I can’ remember the lab, but if you know please message me and I’ll update this post). It will take a string and remove all duplicate characters. This method also can pass in arguments, which is great if you need remove duplicate punctuation (or anything else you need to specify). For someone else’s great blog post on this click on this[ link](http://rubyquicktips.com/post/533010887/ill-put-the-squeeze-on-ya)!
